#+title:  CSE1500 Web Technology Notes
#+author: Berken Tekin
#+OPTIONS: ^:{}
#+TAGS: CSE1500, StudyNotes
#+STARTUP: inlineimages

* DISCLAIMER
  Most of the notes here are a summarization of the provided lectures and lecture notes. When in doubt, always refer to the original sources.
* HTTP
** [[https://en.wikipedia.org/wiki/List_of_HTTP_status_codes][Status Codes]]
   - 1xx informational response :: Indicates that the request was received and understood.
   - 2xx success :: The action requested by the client was received, understood and accepted.
   - 3xx redirection ::
        Indicates the client must take additional action to complete the request.
	Many of these status codes are used in URL redirection.
   - 4xx client errors ::
        For errors that seem to have been caused by the client.
   - 5xx server errors ::
        The server failed to fulfil a request.
	Except when responding to a HEAD request, the server /should/ include an entity
	containing an explanation of the error situation,
	and indicate whether it is a temporary or permanent condition.
	Likewise, user agents should display any included entity to the user.
** Common Headers
   | Header                 | Description                                         |
   |------------------------+-----------------------------------------------------|
   | *Content-Type*         | Entity Type                                         |
   | *Content-Length*       | Length/size of the message                          |
   | *Content-Encoding*     | Data transformations applied to the entity          |
   | Content-Location       | Alternative location of the entity                  |
   | Content-Range          | Range defines the pieces sent for partial entities  |
   | *Content-MD5*          | [[https://en.wikipedia.org/wiki/Checksum][Checksum]] of the content                             |
   | *Expires*              | Date at wich the entity wll become stale            |
   | *Last-Modified*        | Most recent creation/modification date of the entry |
   | Allow                  | The legal request methods for the entity            |
   | *Connection & Upgrade* | Protocol Update                                     |
*** Content-Type
    - [[https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types][MIME]]_{Multipurpose Internet Mail Extensions} types determine the clients' reaction to data.
    - A standard MIME Pattern looks like =[primary object type]/[subtype]= Every MIME has a
      primary object type and a subtype.
    - Examples:
      * text/plain
      * text/html
      * image/jpeg
      * application/pdf
*** Content-Length
    - Indicates the /size/ of the entity body
    - Necessary to detect premature message truncation due to extenuating circumstances
    - Used to discover where one HTTP message ends and the next begins for *persistent connections*, which reuse a [[https://en.wikipedia.org/wiki/Transmission_Control_Protocol][TCP]]
      connection for multiple HTTP request/response messages
*** Content-MD5 (RFC 1321)
    - HTTP messages are sent via TCP (this'll change in [[https://en.wikipedia.org/wiki/HTTP/3][HTTP/3]])
    - However, as the internet is decentralize, different servers implement the protocol differently,
      which causes bugs
    - To counter this, sender generates a 128-bit MD5 checksum of the content
      to detect unintended modifications. This procedure is called *sanity check.*
    - Has been removed from [[https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol][HTTP/1.1]] specification (2014), however; this simple technique
      is still in use
*** Expires
    - Contains the date/time after which the response is considered stale/invalid.
    - Invalid dates, like the value 0, represent a date in the past and mean that the resource is already expired.
    - Web caches have several advantages:
      1) Reduces redundant data transfer
      2) Reduces network bottlenecks
      3) Reduces demand on origin servers
      4) Reduces distance delay
    - =Cache-Control= is a header that overrules =Expires=. While =Expires=
      indicates a resource's expiration date in absolute terms (a specific date/time),
      =Cache-Control= indicates it in relative terms (seconds sicne being sent).
      This is an advantage because the server doesn't have to "reaassign" a specific date/time for expiration repeatedly.
*** Last-Modified
    - Contains the date on which the resource was last *altered*
    - _No indication_ about the amount of changes
    - Often used with =If-Modified-Since= for cache revalidation requests so that the origin server only
      returns the documents if it has been modified since the given date
*** Connection & Upgrade
    - When using =HTTP/1.1= the client always initiates the connection
    - Within this boundary there are ways to _simulate_ a *server-side push* of data:
      - Polling: :: client regularly sends HTTP requests to receive updates
	+ Wastes bandwidth
      - Long Polling: :: client sends an HTTP request and the server holds it open until new data arrives
	+ Difficult to implement
	+ Not widely used
    - This header is used to switch protocols to circumvent these restrictions
      and make server-side push more efficient with protocols such as [[https://en.wikipedia.org/wiki/WebSocket][WebSocket]] through
      the following procedures:
      1) Client and server have to agree to the protocol upgrade.
      2) Client initiates the upgrade with two request headers:
	 
	 ~Connection:Upgrade~

	 ~Upgrade:[protocols]~
      3) Server responds with a =101 Switching Protocols= status if such upgrade is possible.
      4) Once established, both the client and the server can push data.

** Common Methods
   | Method  | Definition                                                |
   |---------+-----------------------------------------------------------|
   | *GET*   | Get a document from the Web server                        |
   | *HEAD*  | Get the header of a document from the Web server          |
   | *POST*  | Send data from the client to the server for processing    |
   | PUT     | Save the body of the request on the server                |
   | TRACE   | Trace the message through the proxy servers to the server |
   | OPTIONS | Determine what methods can operate on a server            |
   | DELETE  | Remove a document from a Web server                       |
** [[https://en.wikipedia.org/wiki/Telnet][Telnet]]
*** Properties
    1) Interactive text-oriented communication with a server
    2) Uses TCP to communicate with server
    3) Won't work with HTTPS
    4) Connections are not encrypted
*** Commands
**** Connecting to a server and requesting headers:
       #+BEGIN_SRC
$ telnet www.reddit.com 80
HEAD /r/TUDelft HTTP/1.1
Host: www.reddit.com
Connection: close
       #+END_SRC
       This gives a =301 Moved Permanently= error because reddit uses =HTTPS= for security reasons.
       
       Full message:
       #+BEGIN_SRC
HTTP/1.1 301 Moved Permanently
Retry-After: 0
Location: https://www.reddit.com/r/TUDelft
Content-Length: 0
Accept-Ranges: bytes
Date: Tue, 14 Dec 2021 00:04:13 GMT
Via: 1.1 varnish
Connection: close
Cache-Control: private, max-age=3600
Strict-Transport-Security: max-age=31536000; includeSubdomains
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Server: snooserv
X-Clacks-Overhead: GNU Terry Pratchett
       #+END_SRC
       Therefore, we need a different tool for HTTPS.
** [[https://en.wikipedia.org/wiki/OpenSSL][OpenSSL]]
*** Properties
    1) Its =s_client= component works just like telnet, though it's a bit less interactive
    2) Uses SSL+TLS for secure connection
    3) Supports HTTPS
    4) Connections are encrypted and secure
*** Commands
**** Command-line args:
       * -crlf :: Translates a LF_{Line Feed} (11th ASCII character) into [[https://en.wikipedia.org/wiki/Carriage_return#Computers][CR+LF]]
       * -connect :: Connects to a SSL HTTP server.
**** Connecting to a server and requesting headers:
    #+BEGIN_SRC
$ openssl s_client -crlf -connect www.reddit.com:443
HEAD /r/TUDelft HTTP/1.1
Host: www.reddit.com
Connection: close
       #+END_SRC
    Output:
    #+BEGIN_SRC
HTTP/1.1 200 OK
Connection: close
Cache-control: private, s-maxage=0, max-age=0, must-revalidate, no-store
Content-Type: text/html; charset=utf-8
Accept-Ranges: bytes
Date: Tue, 14 Dec 2021 00:21:09 GMT
Via: 1.1 varnish
Vary: Accept-Encoding
Set-Cookie: loid=0000000000hjgnftu8.2.1639441268721.Z0FBQUFBQmh0LU4wem9QRHBnYUhVQ1ZVaFlJNk5JVXJaWDBibEFvdG1BVGZlckNJSmdINVg5YTZZdm9XUzY3YUpNMzNKQ1l5RTFmZjhUTFRxMGVvSl9PX1QtTFV2cjRwcjlBRFNWcGJqOEpiSnI2WlRaVXJVY29aWUxib3ZiY1RNRnU0eGtaOExDdFo; path=/; expires=Thu, 14 Dec 2023 00:21:08 GMT; domain=.reddit.com; samesite=none; secure
Set-Cookie: session_tracker=ibekfgdqdfkmfrhhcd.0.1639441269865.Z0FBQUFBQmh0LU4xeDhHaFVlbVg3Z01NNVBRdG04a1NSQk40cEdFQTlCejlzb1g2WEw2TU16Z1FhSV9BdnpRY0pkR2VTUnZyU2F2Y2VXa3h1ZGkxMVd6bEZoWWJRNkN3M0tzVWpNbFA5NU84R0JPd0s5XzlUMlpOMlFDQVB5MXUySGtLZmt5MkZxMV8; path=/; domain=.reddit.com; secure; SameSite=None; Secure
Set-Cookie: token_v2=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2Mzk0NDQ3NDgsInN1YiI6Ii0zNFB4Y291Rm42RVF5OWRXYWZYdE9aZTJJa0JrNHciLCJsb2dnZWRJbiI6ZmFsc2UsInNjb3BlcyI6WyIqIiwiZW1haWwiLCJwaWkiXX0.vvcKCBTwGygYdk4vDEvWndsaH21ZpRs513STVPE45_c; Path=/; Domain=reddit.com; Expires=Thu, 14 Dec 2023 00:21:08 GMT; HttpOnly; Secure
Set-Cookie: csv=2; Max-Age=63072000; Domain=.reddit.com; Path=/; Secure; SameSite=None
Set-Cookie: edgebucket=MdiF5bpSjBeHhPKevt; Domain=reddit.com; Max-Age=63071999; Path=/;  secure
Strict-Transport-Security: max-age=31536000; includeSubdomains
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Server: snooserv
X-Clacks-Overhead: GNU Terry Pratchett
    #+END_SRC
** URL
   - _U_​niform _R_​esource _L_​ocators offer a standardized way to point to a resource on the Internet
   - _Not_ restricted to HTTP, 
    URLs support different schemes/protocols such as =HTTP=, =HTTPS=, =mailto=, =file=, =ftp= etc.
*** Syntax
    =<scheme>://<user>:<password>@<host>:<port>/<path>;<params>?<query>#<frag>=
    - =<scheme>= :: determines the protocol to use when connecting to the server
    - =<user>:<password>= :: is the username and/or password to access a protected resource
    - =<host>= ::  is the domain name or IP address of the server
    - =<port>= :: is the port on which the server is expecting requests
    - =<path>= :: is the local path to the resource
    - =<params>= :: are additional input parameters applications may require
    - =<query>= :: are parameters passed to gateway resources (e.g. a search engine)
      Common convention: =name1=value1&name2=value2...=
    - =<frag>= :: the name of a _piece_ of a resource (i.e. a _part_ of a page), only used by the client.
      For example, with this tag the middle of a webpage may be shown by default.
      However, the client will always retrieve the entire page
*** Design Restrictions
    1. No invisible/non-printing characters
    2. Initially restricted to ASCII_{American Standard Code for Information Interchange} characters, biased towards English speakers
       - Added Later: character encoding e.g. whitespace -> %20
       - [[https://en.wikipedia.org/wiki/Punycode][Punycode (RFC 3492)]] is used to *uniquely* and *reversibly* transform a Unicode string into an ASCII string.
	 Introduces a potential security issue in /mixed/ scripts.
*** Weaknesses
    1. URLs point to a location instead of a Web resource.
       When the location of a website changes, the old URL won't work anymore.
** Authentication
   HTTP is an *anonymous*, *stateless* request/response protocol.
   The same request, sent by different clients, is treated in exactly the same manner.
   Now, there are different identification methods such as:
   1) HTTP headers
   2) Client IP address tracking
   3) Fat URLs
      - Track users through the generation of unique URLs
	1. First time a user visits a resource within a Website, a *unique ID* is generated by the server
	2. Server redirects client to the fat URL (URL + unique ID)
	3. Server *rewrites the HTML* when a HTTP request with a fat URL is received (by adding ID to all hyperlinks)
	4. As a result, independent HTTP requests are tied into a single session.
      - Issues:
	* Fat URLs are ugly
	* They cannot be shared
	* They break web caching mechanisms
	* Extra server load through HTML page rewrites
	* The ID is lost when the user navigates away from the website
   4) User login (HTTP Basic Authentication) 
      + Server explicitly asks the user for authentication (401 Login Required)
      + HTTP has a *built-in mechanism* to support username/password based authentication via
	=WWW-Authenticate= and =Authorization= headers
	* Username and passwords are joined together by a colon and converted to *base-64 encoding*
	* [[https://en.wikipedia.org/wiki/Base64][Base-64]] ensures that only HTTP compatible characters are entered into a message.
      + HTTP is *stateless:* Once logged in, the client sends the login information with each request.
      + Issues:
	1. Username and password can be decoded trivially, the data is not encrypted.
	   HTTPS solves this issue by encrypting sent data.
	2. Users tend to reuse login/password combinations
** Security
   - Secure HTTP should provide:
     + Server Authentication :: Client is sure to talk to the right server
     + Client authentication :: Server is sure to talk to the right client
     + Integrity :: Client and server are sure that their data is intact
     + Encryption :: The data is sufficiently encrypted
     + Efficiency :: Providing security should be a reasonable endeavour
   - =HTTPS= is the most popular, secure form of HTTP
     + URL Scheme is =https://= instead of =http://=
     + Request and response data are encrypted before being sent across the network via [[https://en.wikipedia.org/wiki/Transport_Layer_Security#SSL_1.0,_2.0,_and_3.0][SSL]]_{Secure Sockets Layers}.
       Client and server /negotiate/ the cryptographic protocol to use.
     + TRIVIA: To use =HTTPS= on your website, you need a =TLS= certificate from a CA_{Certificate Authority}. [[https://letsencrypt.org/][Let's Encrypt]] provides this service free of charge.
* HTML5
** Overview
   - HTML 5 is a set of related technologies that together enable rich web content
   - Successor to XHTML and HTML 4.01
*** Features
   - Core HTML5 :: marks up content
   - CSS :: controls the appearance of marked-up content
   - JavaScript :: manipulates the contents of HTML documents & responds to user interactions
   - [[https://caniuse.com][Not all browsers]] support all features.
* JavaScript
** What is JavaScript?
   - JavaScript is an _interpreted_ programming language designed to implement complex, interactive features on web pages. However, JS is also used in other
     areas such as micro-controllers.
   - JavaScript adheres to the [[https://en.wikipedia.org/wiki/ECMAScript][ECMAScript standard]].
   - JavaScript is a _dynamic_ language, meaning you can't enforce a certain /type/ on a variable. All variables can hold any type.
** Scripting
   - Scripts can be applied to the context of a website in two ways: Server-side scripting and client-side scripting.
     - Server-side scripting :: refers to scripts that run on the web server. Only the results of the scripts are returned to the client.
       + Advantage: The results are returned in plain HTML, so the computational power of the client platform is irrelevant.       
       + Disadvantage: As all computations are conducted on the server, this may result in an increasing server load.
     - Client-side scripting :: sends the script itself (and relevant data if necessary) to the client, who executes the code themselves.
       + Advantage: The only job of the server is to send the script and data to the client to be processed, which reduces server load.
       + Disadvantage: The performance of the web application is dependent on the client, as they do the hard work by executing
	 the script.
   - The lecturer recommends the ~<script>~ tag to be put to the bottom of the ~<body>~, however; apparently there are more
     [[https://stackoverflow.com/questions/436411/where-should-i-put-script-tags-in-html-markup][modern]] ways.
** Functional Programming
   - JS allows functions to be treated as data, in other words it supports [[https://en.wikipedia.org/wiki/Functional_programming][functional programming]] by treating functions as
     [[https://en.wikipedia.org/wiki/First-class_citizen][first-class citizens]].
     - TRIVIA: The first chapter of [[https://en.wikipedia.org/wiki/Structure_and_Interpretation_of_Computer_Programs][SICP]] is an amazing introduction to functional programming, you may skim over it if you have the time.
*** Function as data: an example
    - Let's observe this following code (which you can find at the [[https://chauff.github.io/cse1500-web-transcripts/js/#required--recommended-readings-and-activities][official lecture notes]]):
      #+begin_src js
	function toPrint(x) {
	  console.log(x);
	}
	
	function my_func(x, y) {
	  y(x);
	}
	
	my_func(5, toPrint);
      #+end_src

      RESULTS:
      : 5
      : undefined

      This is a perfect example of functional programming.
      - As you can see, ~my_func~ takes two arguments ~x~ and ~y~ and /applies/ ~y~ to ~x~.
	  It is implicitly assumed that ~y~ is a function: using another data type would result in a =TypeError=.
      - The first result is produced by applying ~y~, in our case ~toPrint~, to ~x~. ~console.log(x)~ prints the value of ~x~, ~5~.
      - The second result is the value ~my_func~ /returns/, in our case it doesn't have a return value. So ~undefined~ is printed.
** Scoping, hoisting and ~this~
*** Scoping
    - It is not always possible to access to a variable everywhere inside the code. For example, in Java you can't access a ~private~ value
      outside of you class, that's why we have =getters= and =setters=. They're only visible in the *scope* of your class. Thankfully, scoping
      is not as complicated in JavaScript.
    - JavaScript has very few scopes: =local=, =global= and =block= (introduced with [[http://es6-features.org/#BlockScopedVariables][ES6]]).
      - Local/function scope :: is the scope of the function. Variables declared inside a function cannot be accessed elsewhere. Local variables only exist in the context
	of the function. Each function creates a new scope.^{[[https://www.w3schools.com/js/js_scope.asp][source]]}
      - Global scope :: includes the whole program. A variable declared outside of the function becomes global. It's globally accessible.
      - Block scope :: is provided by the ~let~ and ~const~ keywords (both of which also introduced with ES6). Blocks are delineated with curly braces ={ }=. So, a variable declared
	this way:
	#+begin_src js
	  {
	      let x = 2;
	  }
	#+end_src

	#+RESULTS:
	: undefined

	CANNOT be accessed outside of the curly braces. However, variables declared with ~var~ cannot have block scope. So:
	#+begin_src js
	  {
	      var x = 2;
	  }
	#+end_src

	#+RESULTS:
	: undefined

	CAN be accessed outside of the curly braces if they do not belong to a function.
    - Here's a table of every scope in ES6 JavaScript^{[[https://chauff.github.io/cse1500-web-transcripts/js/#scoping-hoisting-and-this][source]]}:
    | Where/how                                        | Scope  |
    |--------------------------------------------------+--------|
    | =var= declared within a function                 | local  |
    | =var= declared outside of a function             | global |
    | =let= (ES6)                                      | block  |
    | =const= (ES6)                                    | block  |
    | variable declaration without =var/let/const=     | global |
*** [[https://developer.mozilla.org/en-US/docs/Glossary/Hoisting][Hoisting]]
    - Hoisting :: allows functions to be safely used in code /before/ they are declared.
    - Variables can also be hoisted, however; _JS does not hoist initializations_ Take a look at the following code:
      #+begin_src js
	// Returns undefined from hoisted var declaration (not 6)
	console.log(num);
	
	// Declaration and initialization
	var num = 6; 
	
	// Returns 6 after the line with initialization is executed.
	console.log(num);
	
      #+end_src

      #+RESULTS:
      : undefined
      : 6
      : undefined
      - This rule applies for function expressions as well. If you define a variable as a function, the expression won't be hoisted.
      - Variable/function /declarations/ are hoisted:
        #+begin_src js
	  f();
	  console.log(x); // 5
	  console.log(y); // 3
	  function f() { // function declaration
		      x = 5; // global scope
		      y = 3; // global scope
	  }
	  
        #+end_src

	#+RESULTS:
	: 5
	: 3
	: undefined
*** COMMENT =this=
    
** COMMENT An example: Number guessing game
*** Initial Setup
    JavaScript codes are placed inside the ~<script>~ element in a HTML document. To demonstrate how JavaScript functions, I will start with a template
    HTML file, which I have copied from [[https://github.com/mdn/learning-area/blob/main/javascript/introduction-to-js-1/first-splash/number-guessing-game-start.html][MDN]]:
    #+begin_src html
			<!DOCTYPE html>
			<html>
			  <head>
			    <meta charset="utf-8">
			
			    <title>Number guessing game</title>
			
			    <style>
			      html {
				font-family: sans-serif;
			      }
			
			      body {
				width: 50%;
				max-width: 800px;
				min-width: 480px;
				margin: 0 auto;
			      }
			
			      .lastResult {
				color: white;
				padding: 3px;
			      }
			    </style>
			  </head>
			
			  <body>
			    <h1>Number guessing game</h1>
			
			    <p>We have selected a random number between 1 and 100. See if
			      you can guess it in 10 turns or fewer. We'll tell you if your
			      guess was too high or too low.</p>
			
			    <div class="form">
			      <label for="guessField">Enter a guess: </label>
			      <input type="text" id="guessField" class="guessField">
			      <input type="submit" value="Submit guess" class="guessSubmit">
			    </div>
			
			    <div class="resultParas">
			      <p class="guesses"></p>
			      <p class="lastResult"></p>
			      <p class="lowOrHi"></p>
			    </div>
			
			    <script>
			
			      // Your JavaScript goes here
			
			    </script>
			  </body>
			</html>
    #+end_src
[[https://mdn.github.io/learning-area/javascript/introduction-to-js-1/first-splash/number-guessing-game-start.html][Live Result]]

   As you may observe, the button does nnothing when clicked, because there is no script to evaluate what happens when you submit your guess.
*** Starting scripting using JavaScript
   To breathe life into our document,
   we will begin inserting variables to store our data using JavaScript:
   #+begin_src html
	       <!DOCTYPE html>
     ...
		   <script>
		     let randomNumber = Math.floor(Math.random() * 100) + 1;
	  
		     const guesses = document.querySelector('.guesses');
		     const lastResult = document.querySelector('.lastResult');
		     const lowOrHi = document.querySelector('.lowOrHi');
	  
		     const guessSubmit = document.querySelector('.guessSubmit');
		     const guessField = document.querySelector('.guessField');
	  
		     let guessCount = 1;
		     let resetButton;
		   </script>
     ...
     </html>
   #+end_src
   As JavaScript is not a type-safe language, you may define different types of values with the same ~let~ keyword. ~const~ is also used to name values, but unlike variables
   you can't change their values later on. This isn't an issue since we are using ~const~ to store references to parts of our UI, whose names we won't change.
   Now, onto the variables and their fuinctions:
    - randomNumber :: will store the floor of a pseudo-random floating-point number between 1 and 100, generated by [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/random][Math.random()]].
    - guesses, lastResult and lowOrHi :: will be used to store references to the corresponding parts in our HTML document inside which we will insert relevant values.
    - guessField :: refers to the section where we will input our guess, and
    - guessSubmit :: refers to the ``Submit Guess'' button.
    - guessCount :: will keep track of how many guesses we have made so far.
    - resetButton :: will be used to reset the game.
   Of course, this variables can only gain meaning if we learn about how =JavaScript= works.
*** Fundamentals of JavaScript
* COMMENT Node.js: JS on the server
** Definition
   =Node.js= is a JS environment with special API (like HTTP) and default module loader.
** Core concepts
   - Node.JS is event-driven: It waits for events and executes callbacks for each event in the event queue.
     + I/O requests are handled asynchronously.
     + Event loop is executed in a single thread
     + Separate thread pool for I/O requests.
   - Node.JS is food for data-intensive applications; the same can't be said for CPU-intensive tasks.
     + I/O bound programs :: programs constrained by data access (adding more CPUs or main memory will not lead to large speedups)
   - Functions are first-class citizens, in that functions can be treated as data.
** Examples
*** Watching for changes in a file
    - Code:
      #+begin_src js
	// Modules are passed as constants, this returns a JS object
	// "require" is one of the few methods that are synchronous by default
	const fs = require("fs");
	
	if (process.argv.length < 3) {
	    console.log("Usage: node app.js <file>");
	    process.exit(1);
	}
	
	const file = process.argv[2];
	fs.watch(file, function () {
	    // Callback: defines what happens when the file changes
	    console.log("File changed!"); 
	});
	
	console.log("Now watching " + file);
	
      #+end_src
    - JS shouldn't be read from top to bottom, there may be asynchronous processes.
*** Watching for changes in a file over a network
    - With this code, we can send information pertaining to changes made to a file to a client listening on a specific port.
     #+begin_src js
       const fs = require("fs");
       const net = require("net"); // net module
      
       const filename = process.argv[2];
       const port = process.argv[3];
      
     #+end_src
*** "Hello World" of node.js
    - Code:
      #+begin_src js
	const http = require("http");
	
	if (process.argv.length < 3) {
	    console.log("Enter args");
	    process.exit(1);
	}
	const port = process.argv[2];
	
	const server = http.createServer( function (req, res) {
	// What to do if a request comes in
	    res.writeHead(200. { "Content-Type": "text/plain" });
	    res.end("Hello World!");
	    // Won't work, we can only send one response per request
	    res.end("Again"); 
	   console.log("HTTP response sent");
	});
	
	server.listen(port, function () {
	    console.log("Listening on port " + port);
	});
	
      #+end_src
** Express
   - Node.js has a small core code base
   - Node.js comes with some core modules included
   - Express is not one of them (but we have NPM)
     #+begin_src shell
       $ cd my-project
       $ npm init -y
       $ npm install express --save
       # --save argument will save "express" as a dependency and 
       # make "npm install" automatically install this package
       
     #+end_src
* COMMENT CSS
